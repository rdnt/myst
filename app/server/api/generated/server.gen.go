// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/rdnt/oapi-codegen version (devel) DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /keystore/{keystoreId}/invitations)
	CreateKeystoreInvitation(c *gin.Context, keystoreId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// CreateKeystoreInvitation operation middleware
func (siw *ServerInterfaceWrapper) CreateKeystoreInvitation(c *gin.Context) {

	var err error

	// ------------- Path parameter "keystoreId" -------------
	var keystoreId string

	err = runtime.BindStyledParameter("simple", false, "keystoreId", c.Param("keystoreId"), &keystoreId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter keystoreId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateKeystoreInvitation(c, keystoreId)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) *gin.Engine {
	return HandlerWithOptions(si, GinServerOptions{})
}

type GinServerOptions struct {
	BaseURL     string
	BaseRouter  *gin.Engine
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *gin.Engine) *gin.Engine {
	return HandlerWithOptions(si, GinServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *gin.Engine, baseURL string) *gin.Engine {
	return HandlerWithOptions(si, GinServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GinServerOptions) *gin.Engine {
	r := options.BaseRouter

	if r == nil {
		r = gin.New()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.POST(options.BaseURL+"/keystore/:keystoreId/invitations", wrapper.CreateKeystoreInvitation)

	return r
}
